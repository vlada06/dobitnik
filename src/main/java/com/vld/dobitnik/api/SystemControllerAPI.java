package com.vld.dobitnik.api;

import com.vld.dobitnik.cqrs.Draw;
import com.fasterxml.jackson.databind.JsonNode;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

@Api(value = "EuroWinners")
@RequestMapping("/")
public interface SystemControllerAPI {

    @RequestMapping("/")
    public @ResponseBody
    String home();

    /**
     * Create a wheeling (shorthand) system from numbers provided in the request,
     * according to criteria in the request
     *
     * @param requestData JSON containing parameters needed to create the wheeling system.
     *                    Those parameters are the actual numbers to be played, number of combinations produced,
     *                    size of the main game and bonus if present.
     * @return The shorthand/wheeling system of lottery numbers based on parameters passed by the request.
     */
    @ApiOperation(value = "JsonNode", response = JsonNode.class)
    @PostMapping(value = "/system")
    @ResponseBody
    JsonNode getWheelingSystem(@RequestBody JsonNode requestData);


    /**
     * Create a wheeling (shorthand) system from random numbers generated by the server.
     *
     * @param requestData JSON containing parameters needed to create a random wheeling system.
     *                    Those parameters are: the game pool (range of numbers which are drawn in the game,
     *                    number of combinations produced, the bonus game pool if present,
     *                    size of the main game and size of the bonus part of the game if present.
     * @return A randomly created wheeling system for a lottery game based on parameters passed by the request.
     */
    @ApiOperation(value = "JsonNode", response = JsonNode.class)
    @PostMapping(value = "/system/random")
    @ResponseBody
    JsonNode getRandomWheelingSystem(@RequestBody JsonNode requestData);


    /**
     * Add a past draw to the repository.
     *
     * @param requestData JSON containing data to be persisted
     * @return JSON verifying the persisted data
     */
    @ApiOperation(value = "JsonNode", response = JsonNode.class)
    @PostMapping(value = "/draws")
    @ResponseBody
    @ResponseStatus(HttpStatus.CREATED)
    Draw addDraw(@RequestBody JsonNode requestData);

    /**
     * Fetch a single draw record from the repository.
     *
     * @param drawNumber The number of the draw to be fetched.
     * @return A single draw record.
     */
    @GetMapping(value = "/draws/{drawNumber}")
    @ResponseStatus(HttpStatus.OK)
    Draw getDraw(@PathVariable String drawNumber);


    /**
     * Fetch a {@link Page} (page-sized list) of the draw records from the repository.
     *
     * @return A {@link Page} (page-sized list) of draw records.
     */
    @GetMapping(value = "/draws")
    @ResponseStatus(HttpStatus.OK)
    Page<Draw> getDraws(Pageable pageable);


    /**
     * Obtain a system where the provided numbers will not be contained.
     *
     * @param requestData JSON containing the parameters such as numbers not to be included, size of system,
     * @return JSON containing combinations
     */
    @ApiOperation(value = "JsonNode", response = JsonNode.class)
    @PostMapping(value = "/sieve")
    @ResponseBody
    JsonNode getSievedWheelingSystem(@RequestBody JsonNode requestData);

}
